name: Deploy FastAPI (EC2 Amazon Linux)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Archive source (git archive)
        run: |
          git archive --format=tar.gz -o fastapi-src.tgz HEAD

      - name: Upload to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "fastapi-src.tgz"
          target: "/tmp/"

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            APP_DIR=${{ secrets.APP_DIR }}
            REL=$(date +%Y%m%d%H%M%S)
            SVC_USER=${{ secrets.SSH_USER }}

            # 1) Python 3.11 설치 (Amazon Linux 2023)
            if command -v dnf >/dev/null 2>&1; then
              sudo dnf -y upgrade || true
              sudo dnf install -y python3.11 python3.11-devel || true
            elif command -v yum >/dev/null 2>&1; then
              sudo yum -y update || true
              sudo yum install -y python3.11 || true
            fi

            # 2) ffmpeg 정적 바이너리 설치 (없을 때만)
            if ! command -v ffmpeg >/dev/null 2>&1; then
              cd /tmp
              curl -L -o ffmpeg.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
              tar -xJf ffmpeg.tar.xz
              sudo mv ffmpeg-*-amd64-static/ffmpeg /usr/local/bin/ffmpeg
              sudo chmod +x /usr/local/bin/ffmpeg
            fi

            # 3) 디렉터리
            sudo mkdir -p "$APP_DIR/releases/$REL" "$APP_DIR/shared/env" "$APP_DIR/shared/data"
            sudo chown -R "$SVC_USER":"$SVC_USER" "$APP_DIR"

            # 4) 소스 전개
            tar -xzf /tmp/fastapi-src.tgz -C "$APP_DIR/releases/$REL"
            cd "$APP_DIR/releases/$REL"

            # 5) venv(python3.11) + 설치
            python3.11 -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install -e .
            pip install 'uvicorn[standard]'

            # 6) .env
            printf "%s" "${{ secrets.ENV_FILE }}" | sed 's/\r$//' | sudo tee "$APP_DIR/shared/env/.env" >/dev/null
            sudo chown "$SVC_USER":"$SVC_USER" "$APP_DIR/shared/env/.env"

            # 7) current 심볼릭 강제 전환
            sudo rm -rf "$APP_DIR/current"
            ln -sfn "$APP_DIR/releases/$REL" "$APP_DIR/current"

            # 8) systemd 유닛(덮어쓰기)
            SVC=/etc/systemd/system/trendy-lyrics.service
            sudo tee "$SVC" >/dev/null <<SERVICE
            [Unit]
            Description=Trendy Lyrics FastAPI
            After=network.target

            [Service]
            Type=simple
            WorkingDirectory=${APP_DIR}/current
            EnvironmentFile=${APP_DIR}/shared/env/.env
            ExecStart=${APP_DIR}/current/.venv/bin/python -m uvicorn app.main:app --host 127.0.0.1 --port 8010
            Restart=always
            RestartSec=3
            User=${SVC_USER}

            [Install]
            WantedBy=multi-user.target
            SERVICE

            sudo systemctl daemon-reload || true
            sudo systemctl enable trendy-lyrics.service || true
            sudo systemctl restart trendy-lyrics.service
            sudo systemctl status trendy-lyrics.service --no-pager -l || true

            # 9) 헬스 확인 (로그만 남김)
            curl -sf http://127.0.0.1:8010/health || true
